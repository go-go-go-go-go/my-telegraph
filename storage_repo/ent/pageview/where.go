// Code generated by ent, DO NOT EDIT.

package pageview

import (
	"telegraph/storage_repo/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PageID applies equality check predicate on the "page_id" field. It's identical to PageIDEQ.
func PageID(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageID), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// Month applies equality check predicate on the "month" field. It's identical to MonthEQ.
func Month(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonth), v))
	})
}

// Day applies equality check predicate on the "day" field. It's identical to DayEQ.
func Day(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDay), v))
	})
}

// Hour applies equality check predicate on the "hour" field. It's identical to HourEQ.
func Hour(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHour), v))
	})
}

// Views applies equality check predicate on the "views" field. It's identical to ViewsEQ.
func Views(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViews), v))
	})
}

// PageIDEQ applies the EQ predicate on the "page_id" field.
func PageIDEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageID), v))
	})
}

// PageIDNEQ applies the NEQ predicate on the "page_id" field.
func PageIDNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPageID), v))
	})
}

// PageIDIn applies the In predicate on the "page_id" field.
func PageIDIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPageID), v...))
	})
}

// PageIDNotIn applies the NotIn predicate on the "page_id" field.
func PageIDNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPageID), v...))
	})
}

// PageIDGT applies the GT predicate on the "page_id" field.
func PageIDGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPageID), v))
	})
}

// PageIDGTE applies the GTE predicate on the "page_id" field.
func PageIDGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPageID), v))
	})
}

// PageIDLT applies the LT predicate on the "page_id" field.
func PageIDLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPageID), v))
	})
}

// PageIDLTE applies the LTE predicate on the "page_id" field.
func PageIDLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPageID), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYear), v))
	})
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldYear), v...))
	})
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldYear), v...))
	})
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYear), v))
	})
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYear), v))
	})
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYear), v))
	})
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYear), v))
	})
}

// MonthEQ applies the EQ predicate on the "month" field.
func MonthEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonth), v))
	})
}

// MonthNEQ applies the NEQ predicate on the "month" field.
func MonthNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMonth), v))
	})
}

// MonthIn applies the In predicate on the "month" field.
func MonthIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMonth), v...))
	})
}

// MonthNotIn applies the NotIn predicate on the "month" field.
func MonthNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMonth), v...))
	})
}

// MonthGT applies the GT predicate on the "month" field.
func MonthGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMonth), v))
	})
}

// MonthGTE applies the GTE predicate on the "month" field.
func MonthGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMonth), v))
	})
}

// MonthLT applies the LT predicate on the "month" field.
func MonthLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMonth), v))
	})
}

// MonthLTE applies the LTE predicate on the "month" field.
func MonthLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMonth), v))
	})
}

// DayEQ applies the EQ predicate on the "day" field.
func DayEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDay), v))
	})
}

// DayNEQ applies the NEQ predicate on the "day" field.
func DayNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDay), v))
	})
}

// DayIn applies the In predicate on the "day" field.
func DayIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDay), v...))
	})
}

// DayNotIn applies the NotIn predicate on the "day" field.
func DayNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDay), v...))
	})
}

// DayGT applies the GT predicate on the "day" field.
func DayGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDay), v))
	})
}

// DayGTE applies the GTE predicate on the "day" field.
func DayGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDay), v))
	})
}

// DayLT applies the LT predicate on the "day" field.
func DayLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDay), v))
	})
}

// DayLTE applies the LTE predicate on the "day" field.
func DayLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDay), v))
	})
}

// HourEQ applies the EQ predicate on the "hour" field.
func HourEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHour), v))
	})
}

// HourNEQ applies the NEQ predicate on the "hour" field.
func HourNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHour), v))
	})
}

// HourIn applies the In predicate on the "hour" field.
func HourIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHour), v...))
	})
}

// HourNotIn applies the NotIn predicate on the "hour" field.
func HourNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHour), v...))
	})
}

// HourGT applies the GT predicate on the "hour" field.
func HourGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHour), v))
	})
}

// HourGTE applies the GTE predicate on the "hour" field.
func HourGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHour), v))
	})
}

// HourLT applies the LT predicate on the "hour" field.
func HourLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHour), v))
	})
}

// HourLTE applies the LTE predicate on the "hour" field.
func HourLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHour), v))
	})
}

// ViewsEQ applies the EQ predicate on the "views" field.
func ViewsEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViews), v))
	})
}

// ViewsNEQ applies the NEQ predicate on the "views" field.
func ViewsNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldViews), v))
	})
}

// ViewsIn applies the In predicate on the "views" field.
func ViewsIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldViews), v...))
	})
}

// ViewsNotIn applies the NotIn predicate on the "views" field.
func ViewsNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldViews), v...))
	})
}

// ViewsGT applies the GT predicate on the "views" field.
func ViewsGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldViews), v))
	})
}

// ViewsGTE applies the GTE predicate on the "views" field.
func ViewsGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldViews), v))
	})
}

// ViewsLT applies the LT predicate on the "views" field.
func ViewsLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldViews), v))
	})
}

// ViewsLTE applies the LTE predicate on the "views" field.
func ViewsLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldViews), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PageView) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PageView) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PageView) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		p(s.Not())
	})
}
