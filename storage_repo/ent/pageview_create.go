// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"telegraph/storage_repo/ent/pageview"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PageViewCreate is the builder for creating a PageView entity.
type PageViewCreate struct {
	config
	mutation *PageViewMutation
	hooks    []Hook
}

// SetPageID sets the "page_id" field.
func (pvc *PageViewCreate) SetPageID(i int) *PageViewCreate {
	pvc.mutation.SetPageID(i)
	return pvc
}

// SetPath sets the "path" field.
func (pvc *PageViewCreate) SetPath(s string) *PageViewCreate {
	pvc.mutation.SetPath(s)
	return pvc
}

// SetYear sets the "year" field.
func (pvc *PageViewCreate) SetYear(i int) *PageViewCreate {
	pvc.mutation.SetYear(i)
	return pvc
}

// SetMonth sets the "month" field.
func (pvc *PageViewCreate) SetMonth(i int) *PageViewCreate {
	pvc.mutation.SetMonth(i)
	return pvc
}

// SetDay sets the "day" field.
func (pvc *PageViewCreate) SetDay(i int) *PageViewCreate {
	pvc.mutation.SetDay(i)
	return pvc
}

// SetHour sets the "hour" field.
func (pvc *PageViewCreate) SetHour(i int) *PageViewCreate {
	pvc.mutation.SetHour(i)
	return pvc
}

// SetViews sets the "views" field.
func (pvc *PageViewCreate) SetViews(i int) *PageViewCreate {
	pvc.mutation.SetViews(i)
	return pvc
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (pvc *PageViewCreate) SetNillableViews(i *int) *PageViewCreate {
	if i != nil {
		pvc.SetViews(*i)
	}
	return pvc
}

// Mutation returns the PageViewMutation object of the builder.
func (pvc *PageViewCreate) Mutation() *PageViewMutation {
	return pvc.mutation
}

// Save creates the PageView in the database.
func (pvc *PageViewCreate) Save(ctx context.Context) (*PageView, error) {
	var (
		err  error
		node *PageView
	)
	pvc.defaults()
	if len(pvc.hooks) == 0 {
		if err = pvc.check(); err != nil {
			return nil, err
		}
		node, err = pvc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageViewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvc.check(); err != nil {
				return nil, err
			}
			pvc.mutation = mutation
			if node, err = pvc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pvc.hooks) - 1; i >= 0; i-- {
			if pvc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pvc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pvc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageView)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageViewMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *PageViewCreate) SaveX(ctx context.Context) *PageView {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *PageViewCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *PageViewCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvc *PageViewCreate) defaults() {
	if _, ok := pvc.mutation.Views(); !ok {
		v := pageview.DefaultViews
		pvc.mutation.SetViews(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *PageViewCreate) check() error {
	if _, ok := pvc.mutation.PageID(); !ok {
		return &ValidationError{Name: "page_id", err: errors.New(`ent: missing required field "PageView.page_id"`)}
	}
	if _, ok := pvc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "PageView.path"`)}
	}
	if v, ok := pvc.mutation.Path(); ok {
		if err := pageview.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "PageView.path": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.Year(); !ok {
		return &ValidationError{Name: "year", err: errors.New(`ent: missing required field "PageView.year"`)}
	}
	if v, ok := pvc.mutation.Year(); ok {
		if err := pageview.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "PageView.year": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.Month(); !ok {
		return &ValidationError{Name: "month", err: errors.New(`ent: missing required field "PageView.month"`)}
	}
	if v, ok := pvc.mutation.Month(); ok {
		if err := pageview.MonthValidator(v); err != nil {
			return &ValidationError{Name: "month", err: fmt.Errorf(`ent: validator failed for field "PageView.month": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.Day(); !ok {
		return &ValidationError{Name: "day", err: errors.New(`ent: missing required field "PageView.day"`)}
	}
	if v, ok := pvc.mutation.Day(); ok {
		if err := pageview.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`ent: validator failed for field "PageView.day": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.Hour(); !ok {
		return &ValidationError{Name: "hour", err: errors.New(`ent: missing required field "PageView.hour"`)}
	}
	if v, ok := pvc.mutation.Hour(); ok {
		if err := pageview.HourValidator(v); err != nil {
			return &ValidationError{Name: "hour", err: fmt.Errorf(`ent: validator failed for field "PageView.hour": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.Views(); !ok {
		return &ValidationError{Name: "views", err: errors.New(`ent: missing required field "PageView.views"`)}
	}
	if v, ok := pvc.mutation.Views(); ok {
		if err := pageview.ViewsValidator(v); err != nil {
			return &ValidationError{Name: "views", err: fmt.Errorf(`ent: validator failed for field "PageView.views": %w`, err)}
		}
	}
	return nil
}

func (pvc *PageViewCreate) sqlSave(ctx context.Context) (*PageView, error) {
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pvc *PageViewCreate) createSpec() (*PageView, *sqlgraph.CreateSpec) {
	var (
		_node = &PageView{config: pvc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pageview.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pageview.FieldID,
			},
		}
	)
	if value, ok := pvc.mutation.PageID(); ok {
		_spec.SetField(pageview.FieldPageID, field.TypeInt, value)
		_node.PageID = value
	}
	if value, ok := pvc.mutation.Path(); ok {
		_spec.SetField(pageview.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := pvc.mutation.Year(); ok {
		_spec.SetField(pageview.FieldYear, field.TypeInt, value)
		_node.Year = value
	}
	if value, ok := pvc.mutation.Month(); ok {
		_spec.SetField(pageview.FieldMonth, field.TypeInt, value)
		_node.Month = value
	}
	if value, ok := pvc.mutation.Day(); ok {
		_spec.SetField(pageview.FieldDay, field.TypeInt, value)
		_node.Day = value
	}
	if value, ok := pvc.mutation.Hour(); ok {
		_spec.SetField(pageview.FieldHour, field.TypeInt, value)
		_node.Hour = value
	}
	if value, ok := pvc.mutation.Views(); ok {
		_spec.SetField(pageview.FieldViews, field.TypeInt, value)
		_node.Views = value
	}
	return _node, _spec
}

// PageViewCreateBulk is the builder for creating many PageView entities in bulk.
type PageViewCreateBulk struct {
	config
	builders []*PageViewCreate
}

// Save creates the PageView entities in the database.
func (pvcb *PageViewCreateBulk) Save(ctx context.Context) ([]*PageView, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*PageView, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageViewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *PageViewCreateBulk) SaveX(ctx context.Context) []*PageView {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *PageViewCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *PageViewCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
