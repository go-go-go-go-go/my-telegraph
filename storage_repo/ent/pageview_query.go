// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"telegraph/storage_repo/ent/pageview"
	"telegraph/storage_repo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PageViewQuery is the builder for querying PageView entities.
type PageViewQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.PageView
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PageViewQuery builder.
func (pvq *PageViewQuery) Where(ps ...predicate.PageView) *PageViewQuery {
	pvq.predicates = append(pvq.predicates, ps...)
	return pvq
}

// Limit adds a limit step to the query.
func (pvq *PageViewQuery) Limit(limit int) *PageViewQuery {
	pvq.limit = &limit
	return pvq
}

// Offset adds an offset step to the query.
func (pvq *PageViewQuery) Offset(offset int) *PageViewQuery {
	pvq.offset = &offset
	return pvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pvq *PageViewQuery) Unique(unique bool) *PageViewQuery {
	pvq.unique = &unique
	return pvq
}

// Order adds an order step to the query.
func (pvq *PageViewQuery) Order(o ...OrderFunc) *PageViewQuery {
	pvq.order = append(pvq.order, o...)
	return pvq
}

// First returns the first PageView entity from the query.
// Returns a *NotFoundError when no PageView was found.
func (pvq *PageViewQuery) First(ctx context.Context) (*PageView, error) {
	nodes, err := pvq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{pageview.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pvq *PageViewQuery) FirstX(ctx context.Context) *PageView {
	node, err := pvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PageView ID from the query.
// Returns a *NotFoundError when no PageView ID was found.
func (pvq *PageViewQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pvq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{pageview.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pvq *PageViewQuery) FirstIDX(ctx context.Context) int {
	id, err := pvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PageView entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PageView entity is found.
// Returns a *NotFoundError when no PageView entities are found.
func (pvq *PageViewQuery) Only(ctx context.Context) (*PageView, error) {
	nodes, err := pvq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{pageview.Label}
	default:
		return nil, &NotSingularError{pageview.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pvq *PageViewQuery) OnlyX(ctx context.Context) *PageView {
	node, err := pvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PageView ID in the query.
// Returns a *NotSingularError when more than one PageView ID is found.
// Returns a *NotFoundError when no entities are found.
func (pvq *PageViewQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pvq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{pageview.Label}
	default:
		err = &NotSingularError{pageview.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pvq *PageViewQuery) OnlyIDX(ctx context.Context) int {
	id, err := pvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PageViews.
func (pvq *PageViewQuery) All(ctx context.Context) ([]*PageView, error) {
	if err := pvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pvq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pvq *PageViewQuery) AllX(ctx context.Context) []*PageView {
	nodes, err := pvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PageView IDs.
func (pvq *PageViewQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pvq.Select(pageview.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pvq *PageViewQuery) IDsX(ctx context.Context) []int {
	ids, err := pvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pvq *PageViewQuery) Count(ctx context.Context) (int, error) {
	if err := pvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pvq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pvq *PageViewQuery) CountX(ctx context.Context) int {
	count, err := pvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pvq *PageViewQuery) Exist(ctx context.Context) (bool, error) {
	if err := pvq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pvq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pvq *PageViewQuery) ExistX(ctx context.Context) bool {
	exist, err := pvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PageViewQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pvq *PageViewQuery) Clone() *PageViewQuery {
	if pvq == nil {
		return nil
	}
	return &PageViewQuery{
		config:     pvq.config,
		limit:      pvq.limit,
		offset:     pvq.offset,
		order:      append([]OrderFunc{}, pvq.order...),
		predicates: append([]predicate.PageView{}, pvq.predicates...),
		// clone intermediate query.
		sql:    pvq.sql.Clone(),
		path:   pvq.path,
		unique: pvq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PageID int `json:"page_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PageView.Query().
//		GroupBy(pageview.FieldPageID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pvq *PageViewQuery) GroupBy(field string, fields ...string) *PageViewGroupBy {
	grbuild := &PageViewGroupBy{config: pvq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pvq.sqlQuery(ctx), nil
	}
	grbuild.label = pageview.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PageID int `json:"page_id,omitempty"`
//	}
//
//	client.PageView.Query().
//		Select(pageview.FieldPageID).
//		Scan(ctx, &v)
func (pvq *PageViewQuery) Select(fields ...string) *PageViewSelect {
	pvq.fields = append(pvq.fields, fields...)
	selbuild := &PageViewSelect{PageViewQuery: pvq}
	selbuild.label = pageview.Label
	selbuild.flds, selbuild.scan = &pvq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a PageViewSelect configured with the given aggregations.
func (pvq *PageViewQuery) Aggregate(fns ...AggregateFunc) *PageViewSelect {
	return pvq.Select().Aggregate(fns...)
}

func (pvq *PageViewQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pvq.fields {
		if !pageview.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pvq.path != nil {
		prev, err := pvq.path(ctx)
		if err != nil {
			return err
		}
		pvq.sql = prev
	}
	return nil
}

func (pvq *PageViewQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PageView, error) {
	var (
		nodes = []*PageView{}
		_spec = pvq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PageView).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PageView{config: pvq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (pvq *PageViewQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pvq.querySpec()
	_spec.Node.Columns = pvq.fields
	if len(pvq.fields) > 0 {
		_spec.Unique = pvq.unique != nil && *pvq.unique
	}
	return sqlgraph.CountNodes(ctx, pvq.driver, _spec)
}

func (pvq *PageViewQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := pvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (pvq *PageViewQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageview.Table,
			Columns: pageview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pageview.FieldID,
			},
		},
		From:   pvq.sql,
		Unique: true,
	}
	if unique := pvq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pvq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pageview.FieldID)
		for i := range fields {
			if fields[i] != pageview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pvq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pvq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pvq *PageViewQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pvq.driver.Dialect())
	t1 := builder.Table(pageview.Table)
	columns := pvq.fields
	if len(columns) == 0 {
		columns = pageview.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pvq.sql != nil {
		selector = pvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pvq.unique != nil && *pvq.unique {
		selector.Distinct()
	}
	for _, p := range pvq.predicates {
		p(selector)
	}
	for _, p := range pvq.order {
		p(selector)
	}
	if offset := pvq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pvq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PageViewGroupBy is the group-by builder for PageView entities.
type PageViewGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pvgb *PageViewGroupBy) Aggregate(fns ...AggregateFunc) *PageViewGroupBy {
	pvgb.fns = append(pvgb.fns, fns...)
	return pvgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pvgb *PageViewGroupBy) Scan(ctx context.Context, v any) error {
	query, err := pvgb.path(ctx)
	if err != nil {
		return err
	}
	pvgb.sql = query
	return pvgb.sqlScan(ctx, v)
}

func (pvgb *PageViewGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range pvgb.fields {
		if !pageview.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pvgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pvgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pvgb *PageViewGroupBy) sqlQuery() *sql.Selector {
	selector := pvgb.sql.Select()
	aggregation := make([]string, 0, len(pvgb.fns))
	for _, fn := range pvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pvgb.fields)+len(pvgb.fns))
		for _, f := range pvgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pvgb.fields...)...)
}

// PageViewSelect is the builder for selecting fields of PageView entities.
type PageViewSelect struct {
	*PageViewQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pvs *PageViewSelect) Aggregate(fns ...AggregateFunc) *PageViewSelect {
	pvs.fns = append(pvs.fns, fns...)
	return pvs
}

// Scan applies the selector query and scans the result into the given value.
func (pvs *PageViewSelect) Scan(ctx context.Context, v any) error {
	if err := pvs.prepareQuery(ctx); err != nil {
		return err
	}
	pvs.sql = pvs.PageViewQuery.sqlQuery(ctx)
	return pvs.sqlScan(ctx, v)
}

func (pvs *PageViewSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(pvs.fns))
	for _, fn := range pvs.fns {
		aggregation = append(aggregation, fn(pvs.sql))
	}
	switch n := len(*pvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		pvs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		pvs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := pvs.sql.Query()
	if err := pvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
