// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"telegraph/storage_repo/ent/pageview"
	"telegraph/storage_repo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PageViewUpdate is the builder for updating PageView entities.
type PageViewUpdate struct {
	config
	hooks    []Hook
	mutation *PageViewMutation
}

// Where appends a list predicates to the PageViewUpdate builder.
func (pvu *PageViewUpdate) Where(ps ...predicate.PageView) *PageViewUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetPageID sets the "page_id" field.
func (pvu *PageViewUpdate) SetPageID(i int) *PageViewUpdate {
	pvu.mutation.ResetPageID()
	pvu.mutation.SetPageID(i)
	return pvu
}

// AddPageID adds i to the "page_id" field.
func (pvu *PageViewUpdate) AddPageID(i int) *PageViewUpdate {
	pvu.mutation.AddPageID(i)
	return pvu
}

// SetPath sets the "path" field.
func (pvu *PageViewUpdate) SetPath(s string) *PageViewUpdate {
	pvu.mutation.SetPath(s)
	return pvu
}

// SetYear sets the "year" field.
func (pvu *PageViewUpdate) SetYear(i int) *PageViewUpdate {
	pvu.mutation.ResetYear()
	pvu.mutation.SetYear(i)
	return pvu
}

// AddYear adds i to the "year" field.
func (pvu *PageViewUpdate) AddYear(i int) *PageViewUpdate {
	pvu.mutation.AddYear(i)
	return pvu
}

// SetMonth sets the "month" field.
func (pvu *PageViewUpdate) SetMonth(i int) *PageViewUpdate {
	pvu.mutation.ResetMonth()
	pvu.mutation.SetMonth(i)
	return pvu
}

// AddMonth adds i to the "month" field.
func (pvu *PageViewUpdate) AddMonth(i int) *PageViewUpdate {
	pvu.mutation.AddMonth(i)
	return pvu
}

// SetDay sets the "day" field.
func (pvu *PageViewUpdate) SetDay(i int) *PageViewUpdate {
	pvu.mutation.ResetDay()
	pvu.mutation.SetDay(i)
	return pvu
}

// AddDay adds i to the "day" field.
func (pvu *PageViewUpdate) AddDay(i int) *PageViewUpdate {
	pvu.mutation.AddDay(i)
	return pvu
}

// SetHour sets the "hour" field.
func (pvu *PageViewUpdate) SetHour(i int) *PageViewUpdate {
	pvu.mutation.ResetHour()
	pvu.mutation.SetHour(i)
	return pvu
}

// AddHour adds i to the "hour" field.
func (pvu *PageViewUpdate) AddHour(i int) *PageViewUpdate {
	pvu.mutation.AddHour(i)
	return pvu
}

// SetViews sets the "views" field.
func (pvu *PageViewUpdate) SetViews(i int) *PageViewUpdate {
	pvu.mutation.ResetViews()
	pvu.mutation.SetViews(i)
	return pvu
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (pvu *PageViewUpdate) SetNillableViews(i *int) *PageViewUpdate {
	if i != nil {
		pvu.SetViews(*i)
	}
	return pvu
}

// AddViews adds i to the "views" field.
func (pvu *PageViewUpdate) AddViews(i int) *PageViewUpdate {
	pvu.mutation.AddViews(i)
	return pvu
}

// Mutation returns the PageViewMutation object of the builder.
func (pvu *PageViewUpdate) Mutation() *PageViewMutation {
	return pvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *PageViewUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pvu.hooks) == 0 {
		if err = pvu.check(); err != nil {
			return 0, err
		}
		affected, err = pvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageViewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvu.check(); err != nil {
				return 0, err
			}
			pvu.mutation = mutation
			affected, err = pvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pvu.hooks) - 1; i >= 0; i-- {
			if pvu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *PageViewUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *PageViewUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *PageViewUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvu *PageViewUpdate) check() error {
	if v, ok := pvu.mutation.Path(); ok {
		if err := pageview.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "PageView.path": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.Year(); ok {
		if err := pageview.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "PageView.year": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.Month(); ok {
		if err := pageview.MonthValidator(v); err != nil {
			return &ValidationError{Name: "month", err: fmt.Errorf(`ent: validator failed for field "PageView.month": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.Day(); ok {
		if err := pageview.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`ent: validator failed for field "PageView.day": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.Hour(); ok {
		if err := pageview.HourValidator(v); err != nil {
			return &ValidationError{Name: "hour", err: fmt.Errorf(`ent: validator failed for field "PageView.hour": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.Views(); ok {
		if err := pageview.ViewsValidator(v); err != nil {
			return &ValidationError{Name: "views", err: fmt.Errorf(`ent: validator failed for field "PageView.views": %w`, err)}
		}
	}
	return nil
}

func (pvu *PageViewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageview.Table,
			Columns: pageview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pageview.FieldID,
			},
		},
	}
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.PageID(); ok {
		_spec.SetField(pageview.FieldPageID, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedPageID(); ok {
		_spec.AddField(pageview.FieldPageID, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.Path(); ok {
		_spec.SetField(pageview.FieldPath, field.TypeString, value)
	}
	if value, ok := pvu.mutation.Year(); ok {
		_spec.SetField(pageview.FieldYear, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedYear(); ok {
		_spec.AddField(pageview.FieldYear, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.Month(); ok {
		_spec.SetField(pageview.FieldMonth, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedMonth(); ok {
		_spec.AddField(pageview.FieldMonth, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.Day(); ok {
		_spec.SetField(pageview.FieldDay, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedDay(); ok {
		_spec.AddField(pageview.FieldDay, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.Hour(); ok {
		_spec.SetField(pageview.FieldHour, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedHour(); ok {
		_spec.AddField(pageview.FieldHour, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.Views(); ok {
		_spec.SetField(pageview.FieldViews, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedViews(); ok {
		_spec.AddField(pageview.FieldViews, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pageview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PageViewUpdateOne is the builder for updating a single PageView entity.
type PageViewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageViewMutation
}

// SetPageID sets the "page_id" field.
func (pvuo *PageViewUpdateOne) SetPageID(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetPageID()
	pvuo.mutation.SetPageID(i)
	return pvuo
}

// AddPageID adds i to the "page_id" field.
func (pvuo *PageViewUpdateOne) AddPageID(i int) *PageViewUpdateOne {
	pvuo.mutation.AddPageID(i)
	return pvuo
}

// SetPath sets the "path" field.
func (pvuo *PageViewUpdateOne) SetPath(s string) *PageViewUpdateOne {
	pvuo.mutation.SetPath(s)
	return pvuo
}

// SetYear sets the "year" field.
func (pvuo *PageViewUpdateOne) SetYear(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetYear()
	pvuo.mutation.SetYear(i)
	return pvuo
}

// AddYear adds i to the "year" field.
func (pvuo *PageViewUpdateOne) AddYear(i int) *PageViewUpdateOne {
	pvuo.mutation.AddYear(i)
	return pvuo
}

// SetMonth sets the "month" field.
func (pvuo *PageViewUpdateOne) SetMonth(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetMonth()
	pvuo.mutation.SetMonth(i)
	return pvuo
}

// AddMonth adds i to the "month" field.
func (pvuo *PageViewUpdateOne) AddMonth(i int) *PageViewUpdateOne {
	pvuo.mutation.AddMonth(i)
	return pvuo
}

// SetDay sets the "day" field.
func (pvuo *PageViewUpdateOne) SetDay(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetDay()
	pvuo.mutation.SetDay(i)
	return pvuo
}

// AddDay adds i to the "day" field.
func (pvuo *PageViewUpdateOne) AddDay(i int) *PageViewUpdateOne {
	pvuo.mutation.AddDay(i)
	return pvuo
}

// SetHour sets the "hour" field.
func (pvuo *PageViewUpdateOne) SetHour(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetHour()
	pvuo.mutation.SetHour(i)
	return pvuo
}

// AddHour adds i to the "hour" field.
func (pvuo *PageViewUpdateOne) AddHour(i int) *PageViewUpdateOne {
	pvuo.mutation.AddHour(i)
	return pvuo
}

// SetViews sets the "views" field.
func (pvuo *PageViewUpdateOne) SetViews(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetViews()
	pvuo.mutation.SetViews(i)
	return pvuo
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (pvuo *PageViewUpdateOne) SetNillableViews(i *int) *PageViewUpdateOne {
	if i != nil {
		pvuo.SetViews(*i)
	}
	return pvuo
}

// AddViews adds i to the "views" field.
func (pvuo *PageViewUpdateOne) AddViews(i int) *PageViewUpdateOne {
	pvuo.mutation.AddViews(i)
	return pvuo
}

// Mutation returns the PageViewMutation object of the builder.
func (pvuo *PageViewUpdateOne) Mutation() *PageViewMutation {
	return pvuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *PageViewUpdateOne) Select(field string, fields ...string) *PageViewUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated PageView entity.
func (pvuo *PageViewUpdateOne) Save(ctx context.Context) (*PageView, error) {
	var (
		err  error
		node *PageView
	)
	if len(pvuo.hooks) == 0 {
		if err = pvuo.check(); err != nil {
			return nil, err
		}
		node, err = pvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageViewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvuo.check(); err != nil {
				return nil, err
			}
			pvuo.mutation = mutation
			node, err = pvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pvuo.hooks) - 1; i >= 0; i-- {
			if pvuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pvuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pvuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageView)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageViewMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *PageViewUpdateOne) SaveX(ctx context.Context) *PageView {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *PageViewUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *PageViewUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvuo *PageViewUpdateOne) check() error {
	if v, ok := pvuo.mutation.Path(); ok {
		if err := pageview.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "PageView.path": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.Year(); ok {
		if err := pageview.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "PageView.year": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.Month(); ok {
		if err := pageview.MonthValidator(v); err != nil {
			return &ValidationError{Name: "month", err: fmt.Errorf(`ent: validator failed for field "PageView.month": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.Day(); ok {
		if err := pageview.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`ent: validator failed for field "PageView.day": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.Hour(); ok {
		if err := pageview.HourValidator(v); err != nil {
			return &ValidationError{Name: "hour", err: fmt.Errorf(`ent: validator failed for field "PageView.hour": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.Views(); ok {
		if err := pageview.ViewsValidator(v); err != nil {
			return &ValidationError{Name: "views", err: fmt.Errorf(`ent: validator failed for field "PageView.views": %w`, err)}
		}
	}
	return nil
}

func (pvuo *PageViewUpdateOne) sqlSave(ctx context.Context) (_node *PageView, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageview.Table,
			Columns: pageview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pageview.FieldID,
			},
		},
	}
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PageView.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pageview.FieldID)
		for _, f := range fields {
			if !pageview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pageview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.PageID(); ok {
		_spec.SetField(pageview.FieldPageID, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedPageID(); ok {
		_spec.AddField(pageview.FieldPageID, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.Path(); ok {
		_spec.SetField(pageview.FieldPath, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.Year(); ok {
		_spec.SetField(pageview.FieldYear, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedYear(); ok {
		_spec.AddField(pageview.FieldYear, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.Month(); ok {
		_spec.SetField(pageview.FieldMonth, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedMonth(); ok {
		_spec.AddField(pageview.FieldMonth, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.Day(); ok {
		_spec.SetField(pageview.FieldDay, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedDay(); ok {
		_spec.AddField(pageview.FieldDay, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.Hour(); ok {
		_spec.SetField(pageview.FieldHour, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedHour(); ok {
		_spec.AddField(pageview.FieldHour, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.Views(); ok {
		_spec.SetField(pageview.FieldViews, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedViews(); ok {
		_spec.AddField(pageview.FieldViews, field.TypeInt, value)
	}
	_node = &PageView{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pageview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
